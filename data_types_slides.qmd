---
title: "Basic Data Types"
subtitle: "&nbsp;"
author: Rodney Dyer, PhD
format: 
  revealjs:
    background-transition: fade
    theme: default
editor: source
execute: 
  echo: true
title-slide-attributes: 
  data-background-image: "media/contour.png"
  data-background-position: "right"
  data-background-size: initial
---


## Assignment Operator

In `R`, values can be assigned to variables using the `->` operator.  

::: {.incremental}
- Variable names should be informative
    - Must *start with* letter
    - Can include numbers, underscore, periods
    - No spaces
    - Case sensitive.
- Assignment is directional `->` and `<-` work.
- Use names that won't make your *future self* hate your *present self*
:::



## Basic Data Types

There are several different data types in R, each of which represents some *identifiable* component in our analysis mileau.  For this quick lecture, we are going to focus on five of the most common data types.

::: {.incremental}
- Missing Data: The absence of anything.
- Numerical Data: Representing components as a measurable quantity.  
- Character Data: Representations in textual values.  
- Logical Data: `TRUE` or `FALSE` values.  
- Dates: Dates and Time
:::


# No Data {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}



## Missing Data

The most basic type of data is the kind that does not exist.  In `R`, we represent this using the `NA` data type.  

```{r}
x <- NA
x
```




# Numerical Data {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}

## Numerical Data

Numerical data is the *most common* type of data that we will all be using.  In `R`, most computations use this type.

&nbsp;


::: {.incremental}
- Counts, measurements, etc.
- Decimal or Integer
- Real and Imaginary
:::

::: {.fragment .fade-in}

### Example of assignment 
```{r}
42 + 24
```
:::



## Examples

Here are some examples of assignment values, in both directions.  I find it helpful to read out the code directly 

*pop1.x 'is assigned the value of' 23*

&nbsp;

```{r}
pop1.x <- 23
pop1.y <- 55
56 -> pop2.x
63 -> pop2.y
```

## Viewing The Values in Variables

And we can see the values *stored* in those variables by simply typing the names of the variables.

&nbsp;

```{r}
pop1.x 
```

&nbsp;

```{r}
pop1.y
```

::: {.fragment .fade-in}
You can also view the value in a variable by looking in the *Environment* tab in RStudio
:::


## Operators

Most common operators are available and work just the way that you think.  The order of operations is still the same as well, you can use parentheses to order things if necessary.

&nbps;

```{r}
distance <- sqrt( (pop1.x - pop2.x)^2 + (pop1.y - pop2.y)^2  )
distance
```


## Named Functions

As in the previous example, the mathematical function `sqrt()` performs a *square root* operator.  


::: {.incremental}
- Some operators are written like functions.
<pre>
function_name + opening parenthesis + arguments + closing parenthesis
</pre>
- Others are combinations of existing glyphs surrounded by percentages.
<pre>
percent sign + operator + percent sign
</pre>
- There is just not enough keys (and associated glyphs) on the keyboard to handle all the potential types of operators.
:::

## Order of Operations (Top to Bottom) {.scrollable}

You can find this list by `?Syntax` and the help system will show you the following table.

Operator          | 	Description  
------------------|--------------------------------------
:: :::	          | access variables in a namespace
$ @	              | component / slot extraction
[ [[              | indexing
^                 | exponentiation (right to left)
- +               | unary minus and plus
:                 | sequence operator
%any%	            | special operators (including %% and %/%)
* /               | multiply, divide
+ -               | (binary) add, subtract
< > <= >= == !=   | ordering and comparison
!	                | negation
& &&              | and
| ||              | or
~                 | as in formula
-> ->>            | rightwards assignment
<- <<-            | assignment (right to left)
=                 | assignment (right to left)
?	                | help (unary and binary)






## Data Classes

Each data type in `R` can be asked what *class* of variable it points to.

&nbsp;

::: {.fragment}
```{r}
x <- 42
class( x )
```

This *class type* is a data type identifier.

:::

## Introspection

We can also ask a variable if *it is a* particular type of variable.  In `R`, the convention is to create a function that has the form of  `is.datatype()` that will determine if the variable passed to the function is that *datatype*.

&nbsp;

::: {.fragment }
The values they return are `TRUE` if it is

```{r}
is.numeric( pop1.x )
```
:::


::: {.fragment }
or `FALSE` if it is not

```{r}
is.numeric( "Dyer is my favorite professor")
```
:::

## Uses for Introspection

It is not common to use introspection **UNTIL** your code does not work for some reason.  Then it is really important to try to figure out what the problem is and if the data we are looking at are really the type we are thinking they are.  

```{r}
#| error: true
x <- "42"
x + 23
```

::: {.fragment}

&nbsp;

::: {layout-ncol="2"}
```{r}
class(x)
```

```{r}
class( 23 )
```
:::

:::

## Coercion

There are times (like in the last slide) that we'd like to *coerce* a variable of one type into another type.  In this case, we'd like to take the `character` value pointed to by `x` and *coerce* it into a numeric type so that we can perform that addition operator.


## Coercion

We have a *coercion* operator that has the form `as.datatype()`.  If possible, it will convert the passed variable into the other `datatype`


::: {.fragment}
```{r}
as.numeric( x ) + 23 
```
:::

::: {.fragment}
If not, it will give return a missing value (`NA`)

```{r}
#| error: true
as.numeric( "Bob" )
```

:::



# Character Data {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}


## Character

All textual data is of type `character` and is defined as zero or more glyphs surrounded by either single or double quotes.

&nbsp;

```{r}
firstName <- "Rodney"
firstName
class( firstName )
```


## Introspection

As for numeric data types, character also have an introspection operator.

&nbsp;

```{r}
is.character( firstName )
```

&nbsp;

```{r}
is.character( 23 )
```

&nbsp;

```{r}
is.character( "23" )
```


## Coercion Operators

The `character` data type is the most basal type and as such, any type of data can be coerced into its character representation.

&nbsp;

```{r}
y <- as.character( pi )
y
```


## Combination Operators

There are many times that it helpful to combine more than one variable containing character data into a single variable.

&nbsp; 

```{r}
firstName
lastName <- "Dyer"
```


::: {.fragment}

Using the `paste()` function.

```{r}
fullName <- paste( firstName, lastName)
fullName
class( fullName )
```
:::





# Logical Data {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}

## Logical Data

Logical data consists of two **mutually exclusive** states: `TRUE` or `FALSE`

&nbsp;

```{r}
dyer_has_good_jokes <- TRUE
dyer_has_good_jokes
```

## Operators on Logical Types

There are 3 primary logical operators that can be used on logical types; one unary and two binary.

&nbsp;

::: {.fragment}

#### Unary Operator

The `negation` operator
```{r}
!dyer_has_good_jokes
!(!dyer_has_good_jokes)
```
:::






## The Binary Operators

These operators require two separate items to operate on, one to the left and another to the right of the operator.

&nbsp;

::: {layout-ncol="2"}
#### The OR operator

```{r}
TRUE | FALSE
```

#### The AND operator

```{r}
TRUE & FALSE
```
:::





## Introspection

`Logical` types have an introspection operator.

&nbsp;

::: {.fragment}
```{r}
is.logical( dyer_has_good_jokes )
```
:::


## Coercion

Coercion of something else to a `Logical` is more case-specific.

&nbsp;

::: {.fragment}
From `character` data.  

```{r}
as.logical( "TRUE" )
```

&nbsp;

```{r}
as.logical( "FALSE" )
```

:::



## Incompatible Coercion


Other `character` types result in `NA` (missing data).

```{r}
as.logical( "Bob" )
```



## Coercion

Coercion of something else to a `Logical` is more case-specific.

From `numeric` data:  
- Values of `0` are `FALSE`  
- Non-zero values are `TRUE`  

&nbsp;

::: {layout-ncol="2"}
```{r}
as.logical(0)
```

```{r}
as.logical( 323 )
```
:::



# Dates {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}

## What are Dates & Times

When we read textual representations of dates and times, we *intuitively* understand their representations.  So we know what 

- February 3, 1996  
- Tomorrow @ Noon
- Next Thursday afternoon



## Dates & Time in R

But for `R`, we need to be able to tell the computer what these sequences of characters mean in a way that they can understand that something like `03/01/22` means either March 1, 2022 (if you are in the US) or January 3, 2022 (if you are in Europe) and that intrinsic relationships between what a `March` and a `January` really mean.



## {{< fa regular clock >}} Computer Time 

Computers keep time as the number of seconds since the **epoch**, which is defined as `midnight on 1 January 1970`.

&nbsp;


::: {.fragment}

You can have `R` ask your computer what the time is and it will give it to you in the format that your `locale` is set to (probably US-en).

```{r}
Sys.time()
```
:::


## {{< fa regular clock >}} Unix Epoch Time

But this is just a representation of the time for your geospatial position.  Internally, it 

```{r}
unclass( Sys.time() )
```



## Helpful Library

There are a few `R` packages that deal with various issue about time as well as some built-in functionality.  I personally prefer to use the library `lubridate` because it is part of `tidyverse` and it is very easy to work with.

Installing the library if you do not have it (this only need to be done once on your computer).

```{r}
#| eval: false
install.packages("lubridate")
```

&nbsp;

Then tell `R` you would like to use it.
```{r}
library( lubridate )
```

## Creating Dates

To create dates, we typically start with `character` representations of date and time objects.

```{r}
sep1 <- "9/1/22"
class( sep1 )
sep1
```

## Creating Dates

So this is a month/day/year format.   We can use the function `mdy()` and pass it the character representation of the date.

```{r}
today <- mdy( sep1 )
class( today )
today
```



## Actual Today

There are also a few built-in functions that we can use to help reduce our *need to type*.

```{r}
today <- today()
class(today)
today
```


## Date Operators

Things that are intrinsically "Date" objects have operators that can be used.  Examples include adding/subtracting days, determine day of the week, or the Julian day.

&nbsp; 

```{r}
today - 1
```

&nbsp;

```{r}
weekdays( today )
```

&nbsp;

```{r}
yday( today )
```

## Interval Conversions

By default, many operations on date objects are based upon days.

&nbsp;

```{r}
hired <- mdy( "08/25/2004")
days <- today - hired 
days 
```

## Incremenatlly Building Dates & Times 

You can add arbitrary components to dates using these helper functions

```{r}
today + months(1)+ weeks(1) + days(6) + hours(4) - minutes(35) + seconds(15) 
```

## Making Time

Just like making a date, we can make time elements.

&nbsp;

```{r}
classtime <- mdy_hms("09/01/2022 12:30 PM")
classtime
```




## {background-color="black" background-image="media/nist.png" background-position="cover"}

## Setting a Time Zone

The time zone is best set when you create the date/time object.

```{r}
today <- mdy_hm("09/01/2022 12:30 PM", tz="US/Eastern")
today
```



## Time Classes

However, they *MUST* be compatible (these are not because hired has to timezone). 

```{r}
hired <- ymd("2004/08/23", tz="US/Eastern")
howLong <- today - hired
class( howLong )
howLong
```


## Examples

```{r}
today() - mdy("10/14/1969") -> daysAlive
daysAlive
```

:::{.fragment}

### Dyer's Half Life
```{r}
daysAlive/2 + mdy("10/14/1969")
```
:::


## When Is Dyer 20,000 Days Old

```{r}
mdy("10/14/1969") + days(20000) -> day20K
```
&nbsp;

![](media/format.png)

On `r format(day20K,"%A, %B %d, %Y")` Dyer will be 20,000 days old.




## More Date Operations

There are a lot more operations you can do with date and time objects.  I recommend you look at the [Cheatsheet](https://github.com/DyerlabTeaching/Basic-Data-Types/raw/main/R_lubridate.pdf) in the repository for the `lubridate` library.




## Help for Date & Time Conversions {.scrollable}

<font size="-1">
```{r}
#| echo: false
helpfile <- utils:::.getHelpFile(help(strptime) )
outfile <- tempfile(fileext = ".html")
tools::Rd2HTML(helpfile, out=outfile)
rawHTML <- paste( readLines(outfile), collapse = "\n")
knitr::asis_output( htmltools::htmlPreserve(rawHTML))
```
</font>










## This is t


## Questions

::: {layout-ncol="2"}
If you have any questions, please feel free to either post them to the [Canvas](https://canvas.vcu.edu) discussion board for the class, or drop me an [email](mailto://rjdyer@vcu.edu).

![](media/peter_sellers.gif){.middle fig-alt="Peter Sellers looking bored" fig-align="center" width="500"}
:::
